{"version":3,"sources":["index.js"],"names":["Cell","props","style","value","className","onMouseDown","onMouseDownEnter","onContextMenu","e","preventDefault","onMouseEnter","Board","i","this","cells","n","Math","sqrt","length","table","row","j","push","renderCell","React","Component","Game","state","Array","fill","bRules","sRules","isPlaying","updateInterval","map","a","b","r","random","binaryRand","setState","n2","nextCells","neighbors","aliveNum","val","reduce","rules","Number","includes","updateCells","timerID","clearInterval","setInterval","update","setTimer","x","slice","pressedButtons","buttons","setCell","event","target","console","log","join","handleMouseDownEnter","onClick","randomizeCells","resetCells","type","min","max","step","onChange","handleInputChange","togglePlay","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.303bacee.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n// クラスで書いても良いが, stateがなくてrenderメソッドしか無い場合は関数コンポーネントとして簡単に書ける\nfunction Cell(props) {\n  const style = (props.value === 1) ? \"alive\" : \"dead\";\n  return (\n    <td\n      className={style}\n      onMouseDown={props.onMouseDownEnter}\n      onContextMenu={(e) => e.preventDefault()}\n      onMouseEnter={props.onMouseDownEnter}\n    >\n    </td>\n  )\n}\n\nclass Board extends React.Component {\n  renderCell(i) {\n    return (\n      <Cell\n        key={i}\n        value={this.props.cells[i]}\n        onMouseDownEnter={(e) => this.props.onMouseDownEnter(e, i)}\n      />);  // 引数=propsのイメージ\n  }\n\n  render() {\n    const n = Math.sqrt(this.props.cells.length);\n\n    let table = [];\n    for (let i = 0; i < n; i++) {\n      let row = [];\n      for (let j = 0; j < n; j++) {\n        row.push(this.renderCell(i*n+j));\n      }\n      table.push(<tbody key={i}><tr key={i} className=\"cellRow\">{row}</tr></tbody>);\n    }\n    return (\n      <table className=\"cells\">\n        {table}\n      </table>\n    );\n  }\n}\n\n// function RuleCheckBox(props) {\n//   return (\n//     <input\n//       type=\"checkbox\"\n//       value={props.id}\n//       onChange={props.onChange}\n//       checked=\n//   )\n// }\n\n// function Rules(props) {\n//   let buttons = [];\n\n//   return (\n//     <div className=\"rules\">\n//       <div className=\"rule-name\">\n//         {props.value}\n//       </div>\n\n//     </div>\n//   )\n// }\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);  // jsでは, サブクラスのコンストラクタを定義する際は常にsuperを呼ぶ必要がある\n    const n = 55;  // 1辺のセル数\n    this.state = {\n      cells: Array(n**2).fill(0),\n      bRules: [3],\n      sRules: [2, 3],\n      isPlaying: false,\n      updateInterval: 120,\n    };\n  }\n\n  randomizeCells() {\n    const cells = this.state.cells.map(() => binaryRand(0, 1, 0.8));\n    this.setState({\n      cells: cells,\n    })\n  }\n\n  resetCells() {\n    const n2 = this.state.cells.length;\n    const cells = Array(n2).fill(0);\n    this.setState({\n      cells: cells,\n    })\n  }\n\n  update() {\n    const nextCells = updateCells(this.state.cells, this.state.bRules, this.state.sRules);\n    \n    this.setState({\n      cells: nextCells,\n    });\n  }\n\n  setTimer() {\n    if (this.timerID) {\n      clearInterval(this.timerID);\n    }\n    this.timerID = setInterval(\n      () => this.update(),\n      this.state.updateInterval\n    );\n  }\n\n  togglePlay() {\n    const isPlaying = !(this.state.isPlaying);\n    this.setState({\n      isPlaying: isPlaying,\n    });\n\n    if (isPlaying) {  // set timer to update cells\n      this.setTimer();\n    } else {  // clear timer\n      clearInterval(this.timerID);\n    }\n  }\n\n  setCell(i, x) {  // set i-th cell to x\n    const cells = this.state.cells.slice();\n    cells[i] = x;\n    this.setState({\n      cells: cells,\n    });\n  }\n\n  handleMouseDownEnter(e, i) {\n    const pressedButtons = e.buttons;\n    if (pressedButtons%2 === 1) {  // alive\n      this.setCell(i, 1);\n    } else if (pressedButtons === 2) {  // dead\n      this.setCell(i, 0);\n    }\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = Number(target.value);\n    console.log(value);\n    this.setState({\n      updateInterval: value,\n    });\n    if (this.state.isPlaying) {\n      this.setTimer();\n    }\n  }\n\n  render() {\n    const rules = `B: ${this.state.bRules.join(', ')} / S: ${this.state.sRules.join(', ')}`;\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            cells={this.state.cells}\n            onMouseDownEnter={(e, i) => this.handleMouseDownEnter(e, i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{rules}</div>\n          <div className=\"set-cells\">\n            <button\n              className=\"random-button\"\n              onClick={() => this.randomizeCells()}\n            >Set Random</button>\n            <button\n              className=\"reset-button\"\n              onClick={() => this.resetCells()}\n            >Reset Cells</button>\n          </div>\n          <div className=\"speed\">\n            Time interval (ms): {this.state.updateInterval}\n            <br/>\n            <input\n              type=\"range\"\n              min=\"120\" max=\"500\" step=\"10\"\n              value={this.state.updateInterval}\n              onChange={(e) => this.handleInputChange(e)} />\n          </div>\n          <button\n            className=\"play-button\"\n            onClick={() => this.togglePlay()}\n          >{this.state.isPlaying ? 'Pause' : 'Play'}</button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\nfunction binaryRand(a=0, b=1, r=0.5) {\n  // 確率rでaを, 確率(1-r)でbを選ぶ\n  return (Math.random() < r) ? a : b;\n}\n\nfunction updateCells(cells, bRules, sRules) {\n  const n2 = cells.length;\n  const n = Math.sqrt(n2);\n  const neighbors = [-n-1+n2, -n+n2, -n+1+n2, -1+n2, 1, n-1, n, n+1];\n  const nextCells = Array(n2).fill(0);\n  \n  for (let i = 0; i < n2; i++) {\n    const aliveNum = neighbors.map(val => cells[(i+val)%n2]).reduce((a, b) => a + b);\n    const rules = (cells[i] === 1) ? sRules : bRules;\n    nextCells[i] = Number(rules.includes(aliveNum));\n  }\n\n  return nextCells;\n}"],"sourceRoot":""}