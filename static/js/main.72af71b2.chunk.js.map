{"version":3,"sources":["index.js"],"names":["Cell","props","style","value","className","onClick","onContextMenu","onMouseEnter","Board","i","this","cells","e","n","Math","sqrt","length","table","row","j","push","renderCell","React","Component","Game","state","Array","fill","bRules","sRules","isPlaying","map","a","b","r","random","binaryRand","setState","n2","neighbors","nextCells","aliveNum","val","reduce","rules","Number","includes","timerID","setInterval","updateCells","clearInterval","x","slice","setCell","preventDefault","pressedButtons","buttons","join","handleClick","handleRightClick","handleMouseEnter","togglePlay","randomizeCells","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72af71b2.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n// クラスで書いても良いが, stateがなくてrenderメソッドしか無い場合は関数コンポーネントとして簡単に書ける\nfunction Cell(props) {\n  const style = (props.value === 1) ? \"alive\" : \"dead\";\n  return (\n    <td\n      className={style}\n      onClick={props.onClick}\n      onContextMenu={props.onContextMenu}\n      onMouseEnter={props.onMouseEnter}\n    >\n    </td>\n  )\n}\n\nclass Board extends React.Component {\n  renderCell(i) {\n    return (\n      <Cell\n        key={i}\n        value={this.props.cells[i]}\n        onClick={() => this.props.onClick(i)}\n        onContextMenu={(e) => this.props.onContextMenu(e, i)}\n        onMouseEnter={(e) => this.props.onMouseEnter(e, i)}\n      />);  // 引数=propsのイメージ\n  }\n\n  render() {\n    const n = Math.sqrt(this.props.cells.length);\n\n    let table = [];\n    for (let i = 0; i < n; i++) {\n      let row = [];\n      for (let j = 0; j < n; j++) {\n        row.push(this.renderCell(i*n+j));\n      }\n      table.push(<tbody key={i}><tr key={i} className=\"cellRow\">{row}</tr></tbody>);\n    }\n    return (\n      <table className=\"cells\">\n        {table}\n      </table>\n    );\n  }\n}\n\n// function RuleCheckBox(props) {\n//   return (\n//     <input\n//       type=\"checkbox\"\n//       value={props.id}\n//       onChange={props.onChange}\n//       checked=\n//   )\n// }\n\n// function Rules(props) {\n//   let buttons = [];\n\n//   return (\n//     <div className=\"rules\">\n//       <div className=\"rule-name\">\n//         {props.value}\n//       </div>\n\n//     </div>\n//   )\n// }\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);  // jsでは, サブクラスのコンストラクタを定義する際は常にsuperを呼ぶ必要がある\n    const n = 55;  // 1辺のセル数\n    this.state = {\n      cells: Array(n**2).fill(0),\n      bRules: [3],\n      sRules: [2, 3],\n      isPlaying: false,\n    };\n  }\n\n  randomizeCells() {\n    const cells = this.state.cells.map(() => binaryRand(0, 1, 0.8));\n    this.setState({\n      cells: cells,\n    })\n  }\n\n  updateCells() {\n    const n2 = this.state.cells.length;\n    const n = Math.sqrt(n2);\n    const neighbors = [-n-1+n2, -n+n2, -n+1+n2, -1+n2, 1, n-1, n, n+1];\n    const nextCells = Array(n2).fill(0);\n    \n    for (let i = 0; i < n2; i++) {\n      const aliveNum = neighbors.map(val => this.state.cells[(i+val)%n2]).reduce((a, b) => a + b);\n      const rules = (this.state.cells[i] === 1) ? this.state.sRules : this.state.bRules;\n      nextCells[i] = Number(rules.includes(aliveNum));\n    }\n    \n    this.setState({\n      cells: nextCells,\n    });\n  }\n\n  togglePlay() {\n    const isPlaying = !(this.state.isPlaying);\n    this.setState({\n      isPlaying: isPlaying,\n    });\n\n    if (isPlaying) {  // set timer to update cells\n      this.timerID = setInterval(\n        () => this.updateCells(),\n        120\n      );\n    } else {  // clear timer\n      clearInterval(this.timerID);\n    }\n  }\n\n  setCell(i, x) {  // set i-th cell to x\n    const cells = this.state.cells.slice();\n    cells[i] = x;\n    this.setState({\n      cells: cells,\n    });\n  }\n\n  handleClick(i) {\n    this.setCell(i, 1);\n  }\n\n  handleRightClick(e, i) {\n    e.preventDefault();\n    this.setCell(i, 0);\n  }\n\n  handleMouseEnter(e, i) {\n    const pressedButtons = e.buttons;\n    if (pressedButtons%2 === 1) {  // alive\n      this.setCell(i, 1);\n    } else if (pressedButtons === 2) {  // dead\n      this.setCell(i, 0);\n    }\n  }\n\n  // jumpTo(step) {\n  //   this.setState({\n  //     stepNumber: step,\n  //     xIsNext: (step % 2) === 0,\n  //   });  // 更新したい値だけ書いておけば良い\n  // }\n\n  render() {\n    const rules = `B: ${this.state.bRules.join(', ')} / S: ${this.state.sRules.join(', ')}`;\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            cells={this.state.cells}\n            onClick={(i) => this.handleClick(i)}\n            onContextMenu={(e, i) => this.handleRightClick(e, i)}\n            onMouseEnter={(e, i) => this.handleMouseEnter(e, i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{rules}</div>\n          <button\n            className=\"play-button\"\n            onClick={() => this.togglePlay()}\n          >{this.state.isPlaying ? 'Pause' : 'Play'}</button>\n          <button\n            className=\"random-button\"\n            onClick={() => this.randomizeCells()}\n          >Random</button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction binaryRand(a=0, b=1, r=0.5) {\n  // 確率rでaを, 確率(1-r)でbを選ぶ\n  return (Math.random() < r) ? a : b;\n}\n"],"sourceRoot":""}